version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    container_name: platform_postgres_prod
    environment:
      POSTGRES_DB: platform_db
      POSTGRES_USER: platform_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - platform_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U platform_user -d platform_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: platform_backend_prod
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://platform_user:${POSTGRES_PASSWORD}@postgres:5432/platform_db
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - platform_network_prod
    restart: unless-stopped
    volumes:
      - ./backend/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${VITE_API_URL}
        - VITE_SOCKETIO_URL=${VITE_SOCKETIO_URL}
    container_name: platform_frontend_prod
    depends_on:
      - backend
    networks:
      - platform_network_prod
    restart: unless-stopped

  # Socket.IO сервер
  socketio:
    build:
      context: .
      dockerfile: ./socketio/Dockerfile
    container_name: platform_socketio_prod
    environment:
      NODE_ENV: production
      PORT: 3002
      DATABASE_URL: postgresql://platform_user:${POSTGRES_PASSWORD}@postgres:5432/platform_db
      CORS_ORIGIN: ${CORS_ORIGIN}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - platform_network_prod
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: platform_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - socketio
    networks:
      - platform_network_prod
    restart: unless-stopped

volumes:
  postgres_data_prod:

networks:
  platform_network_prod:
    driver: bridge
