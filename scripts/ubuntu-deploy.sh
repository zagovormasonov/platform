#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Ubuntu —Å–µ—Ä–≤–µ—Ä–µ
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/ubuntu-deploy.sh

set -e

echo "üöÄ –î–µ–ø–ª–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ Ubuntu —Å–µ—Ä–≤–µ—Ä"
echo "=================================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
    sudo apt update
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    sudo usermod -aG docker $USER
    
    echo "‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker Compose
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    
    echo "‚úÖ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞ –≤ Docker Hub
echo "üîë –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥ –≤ Docker Hub..."
if ! docker system info | grep -q "Username"; then
    echo "‚ö†Ô∏è  –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ Docker Hub"
    echo "–í–æ–π–¥–∏—Ç–µ –≤ Docker Hub:"
    docker login
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
if [ ! -f "docker-compose.prod.yml" ]; then
    echo "‚ùå –§–∞–π–ª docker-compose.prod.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

if [ ! -f ".env" ]; then
    echo "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
    echo "üìã –°–æ–∑–¥–∞–µ–º .env –∏–∑ env.production..."
    cp env.production .env
    echo "‚ö†Ô∏è  –í–ê–ñ–ù–û: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏!"
    echo "   nano .env"
    echo ""
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è .env —Ñ–∞–π–ª–∞..."
fi

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo "üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
export $(cat .env | grep -v '^#' | xargs)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
required_vars=("POSTGRES_PASSWORD" "JWT_SECRET" "CORS_ORIGIN")
for var in "${required_vars[@]}"; do
    if [ -z "${!var}" ]; then
        echo "‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è $var –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        exit 1
    fi
done

echo "‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo "üìÅ –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
mkdir -p nginx/ssl
mkdir -p nginx/logs
mkdir -p backend/uploads
mkdir -p backups

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
if [ ! -f "nginx/ssl/cert.pem" ]; then
    echo "üîê –°–æ–∑–¥–∞–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout nginx/ssl/key.pem \
        -out nginx/ssl/cert.pem \
        -subj "/C=RU/ST=Moscow/L=Moscow/O=Platform/CN=localhost"
    echo "‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω"
fi

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
docker-compose -f docker-compose.prod.yml down --remove-orphans

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
echo "üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã..."
docker system prune -f

# –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã
echo "üî® –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã..."
docker-compose -f docker-compose.prod.yml build --no-cache

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã..."
docker-compose -f docker-compose.prod.yml up -d

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
sleep 30

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose -f docker-compose.prod.yml ps

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
echo "üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏..."
docker-compose -f docker-compose.prod.yml logs --tail=50

# –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
echo "üè• –ü—Ä–æ–≤–µ—Ä—è–µ–º health check..."
sleep 10

if curl -f http://localhost:8080/api/health > /dev/null 2>&1; then
    echo "‚úÖ Health check –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ"
else
    echo "‚ùå Health check –Ω–µ –ø—Ä–æ—à–µ–ª"
    echo "üìã –õ–æ–≥–∏ backend:"
    docker-compose -f docker-compose.prod.yml logs backend
    exit 1
fi

echo ""
echo "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
echo "üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: $CORS_ORIGIN"
echo "üìã –ï—Å–ª–∏ –ø–æ—Ä—Ç 80 –∑–∞–Ω—è—Ç, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 8080"
echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: docker-compose -f docker-compose.prod.yml logs -f"
echo ""
echo "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "   –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤: docker-compose -f docker-compose.prod.yml ps"
echo "   –õ–æ–≥–∏: docker-compose -f docker-compose.prod.yml logs -f"
echo "   Health check: curl http://localhost:8080/api/health"
echo "   –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ./scripts/backup.sh"
