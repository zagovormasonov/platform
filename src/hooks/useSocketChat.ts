import { useEffect, useRef, useState, useCallback } from 'react'
import { io, Socket } from 'socket.io-client'
import { useAuth } from '../contexts/AuthContext'

interface Message {
  id: string
  chatId: string
  senderId: string
  content: string
  messageType: string
  timestamp: string
  isRead: boolean
}

interface SocketChatHook {
  socket: Socket | null
  isConnected: boolean
  currentChatId: string | null
  messages: Message[]
  activeUsers: string[]
  connectionStatus: 'connecting' | 'connected' | 'disconnected' | 'error'
  joinChat: (chatId: string) => void
  leaveChat: (chatId: string) => void
  sendMessage: (chatId: string, content: string, messageType?: string) => Promise<void>
  markMessagesRead: (chatId: string, messageIds: string[]) => void
  getActiveUsers: () => void
  getChatInfo: (chatId: string) => void
  ping: () => void
}

const SOCKET_URL = process.env.NODE_ENV === 'production' 
  ? 'https://platform-ruby-kappa.vercel.app' 
  : 'http://localhost:3001'

export function useSocketChat(): SocketChatHook {
  const { user } = useAuth()
  const [socket, setSocket] = useState<Socket | null>(null)
  const [isConnected, setIsConnected] = useState(false)
  const [currentChatId, setCurrentChatId] = useState<string | null>(null)
  const [messages, setMessages] = useState<Message[]>([])
  const [activeUsers, setActiveUsers] = useState<string[]>([])
  const [connectionStatus, setConnectionStatus] = useState<'connecting' | 'connected' | 'disconnected' | 'error'>('disconnected')
  
  const messagesRef = useRef<Message[]>([])
  const reconnectAttempts = useRef(0)
  const maxReconnectAttempts = 5

  // –û–±–Ω–æ–≤–ª—è–µ–º ref –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ messages
  useEffect(() => {
    messagesRef.current = messages
  }, [messages])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  useEffect(() => {
    if (!user?.id) return

    console.log('üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id)
    
    const newSocket = io(SOCKET_URL, {
      auth: {
        userId: user.id
      },
      transports: ['websocket', 'polling'],
      timeout: 20000,
      forceNew: true
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    newSocket.on('connect', () => {
      console.log('‚úÖ Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω:', newSocket.id)
      setIsConnected(true)
      setConnectionStatus('connected')
      reconnectAttempts.current = 0
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    newSocket.on('disconnect', (reason: string) => {
      console.log('‚ùå Socket.IO –æ—Ç–∫–ª—é—á–µ–Ω:', reason)
      setIsConnected(false)
      setConnectionStatus('disconnected')
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      if (reconnectAttempts.current < maxReconnectAttempts) {
        reconnectAttempts.current++
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${reconnectAttempts.current}/${maxReconnectAttempts}`)
        setTimeout(() => {
          newSocket.connect()
        }, 2000 * reconnectAttempts.current)
      }
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    newSocket.on('connect_error', (error: Error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Socket.IO:', error)
      setConnectionStatus('error')
      
      if (reconnectAttempts.current < maxReconnectAttempts) {
        reconnectAttempts.current++
        setTimeout(() => {
          newSocket.connect()
        }, 3000 * reconnectAttempts.current)
      }
    })

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    newSocket.on('connected', (data: any) => {
      console.log('üéâ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data)
      setConnectionStatus('connected')
    })

    // –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    newSocket.on('new_message', (message: Message) => {
      console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message)
      setMessages(prev => {
        const updated = [...prev, message]
        messagesRef.current = updated
        return updated
      })
    })

    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    newSocket.on('message_sent', (data: any) => {
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', data)
    })

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É
    newSocket.on('user_joined_chat', (data: any) => {
      console.log('üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É:', data)
    })

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç
    newSocket.on('user_left_chat', (data: any) => {
      console.log('üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç:', data)
    })

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è
    newSocket.on('user_disconnected', (data: any) => {
      console.log('üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', data)
    })

    // –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    newSocket.on('messages_read', (data: any) => {
      console.log('üëÅÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ:', data)
    })

    // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    newSocket.on('active_users', (data: any) => {
      console.log('üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', data)
      setActiveUsers(data.users)
    })

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
    newSocket.on('chat_info', (data: any) => {
      console.log('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:', data)
    })

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
    newSocket.on('user_online', (data: any) => {
      console.log('üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω:', data)
    })

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ–ª–∞–π–Ω
    newSocket.on('user_offline', (data: any) => {
      console.log('üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ–ª–∞–π–Ω:', data)
    })

    // –û—Ç–≤–µ—Ç –Ω–∞ –ø–∏–Ω–≥
    newSocket.on('pong', (data: any) => {
      console.log('üèì Pong –ø–æ–ª—É—á–µ–Ω:', data)
    })

    // –û—à–∏–±–∫–∏
    newSocket.on('error', (error: any) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ Socket.IO:', error)
    })

    setSocket(newSocket)
    setConnectionStatus('connecting')

    return () => {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è')
      newSocket.disconnect()
      setSocket(null)
      setIsConnected(false)
      setConnectionStatus('disconnected')
    }
  }, [user?.id])

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —á–∞—Ç—É
  const joinChat = useCallback((chatId: string) => {
    if (!socket || !isConnected) {
      console.warn('‚ö†Ô∏è Socket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É')
      return
    }

    console.log('üì± –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —á–∞—Ç—É:', chatId)
    socket.emit('join_chat', { chatId })
    setCurrentChatId(chatId)
    
    // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —á–∞—Ç–∞
    setMessages([])
  }, [socket, isConnected])

  // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞
  const leaveChat = useCallback((chatId: string) => {
    if (!socket || !isConnected) {
      console.warn('‚ö†Ô∏è Socket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç')
      return
    }

    console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞:', chatId)
    socket.emit('leave_chat', { chatId })
    
    if (currentChatId === chatId) {
      setCurrentChatId(null)
      setMessages([])
    }
  }, [socket, isConnected, currentChatId])

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = useCallback(async (chatId: string, content: string, messageType: string = 'text') => {
    if (!socket || !isConnected) {
      console.warn('‚ö†Ô∏è Socket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
      throw new Error('Socket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
    }

    if (!content.trim()) {
      throw new Error('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
    }

    console.log('üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç:', chatId)
    
    return new Promise<void>((resolve, reject) => {
      const timeout = setTimeout(() => {
        reject(new Error('–¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è'))
      }, 10000)

      const handleMessageSent = (data: any) => {
        clearTimeout(timeout)
        socket.off('message_sent', handleMessageSent)
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', data)
        resolve()
      }

      const handleError = (error: any) => {
        clearTimeout(timeout)
        socket.off('message_sent', handleMessageSent)
        socket.off('error', handleError)
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
        reject(error)
      }

      socket.on('message_sent', handleMessageSent)
      socket.on('error', handleError)
      
      socket.emit('send_message', {
        chatId,
        content: content.trim(),
        messageType
      })
    })
  }, [socket, isConnected])

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
  const markMessagesRead = useCallback((chatId: string, messageIds: string[]) => {
    if (!socket || !isConnected) {
      console.warn('‚ö†Ô∏è Socket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ')
      return
    }

    console.log('üëÅÔ∏è –û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', { chatId, messageIds })
    socket.emit('mark_messages_read', { chatId, messageIds })
  }, [socket, isConnected])

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const getActiveUsers = useCallback(() => {
    if (!socket || !isConnected) {
      console.warn('‚ö†Ô∏è Socket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
      return
    }

    console.log('üë• –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    socket.emit('get_active_users')
  }, [socket, isConnected])

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
  const getChatInfo = useCallback((chatId: string) => {
    if (!socket || !isConnected) {
      console.warn('‚ö†Ô∏è Socket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ')
      return
    }

    console.log('‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ:', chatId)
    socket.emit('get_chat_info', { chatId })
  }, [socket, isConnected])

  // –§—É–Ω–∫—Ü–∏—è –ø–∏–Ω–≥–∞
  const ping = useCallback(() => {
    if (!socket || !isConnected) {
      console.warn('‚ö†Ô∏è Socket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏–Ω–≥')
      return
    }

    console.log('üèì –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏–Ω–≥–∞')
    socket.emit('ping')
  }, [socket, isConnected])

  return {
    socket,
    isConnected,
    currentChatId,
    messages,
    activeUsers,
    connectionStatus,
    joinChat,
    leaveChat,
    sendMessage,
    markMessagesRead,
    getActiveUsers,
    getChatInfo,
    ping
  }
}
