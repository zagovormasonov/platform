import { useState, useEffect } from 'react'
import { useAuth } from '../contexts/AuthContext'
import { supabase } from '../lib/supabase'
import { Calendar, X, ChevronLeft, ChevronRight } from 'lucide-react'

interface TimeSlot {
  id: string
  expert_id: string
  slot_date: string
  start_time: string
  end_time: string
  is_available: boolean
  duration_minutes: number
  expert_name: string
  expert_avatar: string | null
}

interface Service {
  id: string
  service_name: string
  service_description: string
  price: number
  currency: string
}

interface Booking {
  id: string
  expert_id: string
  client_id: string
  slot_id: string
  service_id: string | null
  booking_date: string
  start_time: string
  end_time: string
  total_price: number | null
  status: string
  expert_name: string
  client_name: string
  service_name: string | null
  status_name: string
}

interface ExpertCalendarProps {
  expertId: string
  viewMode?: 'client' | 'expert'
}

export function ExpertCalendar({ expertId, viewMode = 'client' }: ExpertCalendarProps) {
  const { user } = useAuth()
  const [currentDate, setCurrentDate] = useState(new Date())
  const [timeSlots, setTimeSlotsState] = useState<TimeSlot[]>([])
  
  // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è setTimeSlots —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const setTimeSlots = (slots: TimeSlot[]) => {
    console.log('üîß setTimeSlots –≤—ã–∑–≤–∞–Ω —Å', slots.length, '—Å–ª–æ—Ç–∞–º–∏')
    console.log('üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –≤ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–∞—Ö:', [...new Set(slots.map(s => s.slot_date))])
    setTimeSlotsState(slots)
  }
  const [services, setServices] = useState<Service[]>([])
  const [bookings, setBookings] = useState<Booking[]>([])
  const [loading, setLoading] = useState(true)
  const [booking, setBooking] = useState(false)
  const [updatingBooking, setUpdatingBooking] = useState(false)
  const [error, setError] = useState('')
  const [message, setMessage] = useState('')
  
  // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const [showBookingModal, setShowBookingModal] = useState(false)
  const [selectedSlot, setSelectedSlot] = useState<TimeSlot | null>(null)
  const [selectedService, setSelectedService] = useState<string>('')
  const [bookingNotes, setBookingNotes] = useState('')

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –Ω–µ–¥–µ–ª–∏
  const getWeekDates = (date: Date) => {
    const week = []
    const startOfWeek = new Date(date)
    startOfWeek.setDate(date.getDate() - date.getDay() + 1) // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    
    for (let i = 0; i < 7; i++) {
      const day = new Date(startOfWeek)
      day.setDate(startOfWeek.getDate() + i)
      week.push(day)
    }
    
    return week
  }

  const weekDates = getWeekDates(currentDate)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    console.log('üîÑ useEffect loadData —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–ª—è:', { expertId, currentDate: currentDate.toISOString(), weekDates: weekDates.map(d => d.toISOString().split('T')[0]) })
    loadData()
  }, [expertId, currentDate])

  // –ü–µ—Ä–µ—Å—á–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  useEffect(() => {
    console.log('useEffect –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –≤—ã–∑–≤–∞–Ω:', { timeSlotsLength: timeSlots.length, bookingsLength: bookings.length })
    
    if (timeSlots.length > 0 && bookings.length > 0) {
      const updatedSlots = timeSlots.map(slot => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞
        const hasActiveBooking = bookings.some(booking => 
          booking.slot_id === slot.id && 
          ['pending', 'confirmed'].includes(booking.status)
        )
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ª–∏—á–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        return {
          ...slot,
          is_available: !hasActiveBooking
        }
      })
      
      console.log('–ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã:', updatedSlots)
      console.log('–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å—á–µ—Ç–∞:', updatedSlots.filter(s => !s.is_available).length)
      
      setTimeSlots(updatedSlots)
    } else if (timeSlots.length > 0 && bookings.length === 0) {
      console.log('–°–ª–æ—Ç—ã –µ—Å—Ç—å, –Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ—Ç - –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ª–æ—Ç—ã –∫–∞–∫ –µ—Å—Ç—å')
      // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º setTimeSlots, —á—Ç–æ–±—ã –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    } else {
      console.log('–ü–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω:', { timeSlotsLength: timeSlots.length, bookingsLength: bookings.length })
    }
  }, [timeSlots.length, bookings.length]) // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞

  const loadData = async () => {
    try {
      setLoading(true)
      
      const startDate = weekDates[0].toISOString().split('T')[0]
      const endDate = weekDates[6].toISOString().split('T')[0]

      console.log('üîÑ loadData –≤—ã–∑–≤–∞–Ω –¥–ª—è –Ω–µ–¥–µ–ª–∏:', { startDate, endDate })
      console.log('üìÖ –î–∞—Ç—ã –Ω–µ–¥–µ–ª–∏:', weekDates.map(d => d.toISOString().split('T')[0]))
      console.log('üë§ Expert ID:', expertId)

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ—Ç—ã
      console.log('‚è∞ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–ª–æ—Ç–æ–≤...')
      await loadTimeSlots(startDate, endDate)
      console.log('‚úÖ –°–ª–æ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞
      console.log('üéØ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —É—Å–ª—É–≥...')
      await loadServices()
      console.log('‚úÖ –£—Å–ª—É–≥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
      console.log('üìã –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...')
      await loadBookings(startDate, endDate)
      console.log('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message)
    } finally {
      setLoading(false)
    }
  }

  const loadTimeSlots = async (startDate: string, endDate: string) => {
    console.log('üîç loadTimeSlots –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { expertId, startDate, endDate })
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ time_slots
      const { data: slotsData, error: slotsError } = await supabase
        .from('time_slots')
        .select(`
          id,
          expert_id,
          slot_date,
          start_time,
          end_time,
          is_available,
          schedule_id
        `)
        .eq('expert_id', expertId)
        .gte('slot_date', startDate)
        .lte('slot_date', endDate)
        .order('slot_date, start_time')

      console.log('üíæ –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ time_slots —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', slotsData?.length || 0, '—Å–ª–æ—Ç–æ–≤')
      console.log('üìä –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã:', slotsData)

      if (slotsError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', slotsError)
        throw slotsError
      }

      if (!slotsData || slotsData.length === 0) {
        console.log('üö´ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–ª–æ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞')
        setTimeSlots([])
        return
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–ø–µ—Ä—Ç–µ
      const { data: expertProfile, error: profileError } = await supabase
        .from('profiles')
        .select('full_name, avatar_url')
        .eq('id', expertId)
        .single()

      if (profileError) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞:', profileError)
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
      const scheduleIds = [...new Set(slotsData.map(slot => slot.schedule_id).filter(Boolean))]
      let scheduleDurations: Record<string, number> = {}
      
      if (scheduleIds.length > 0) {
        const { data: scheduleData, error: scheduleError } = await supabase
          .from('expert_schedule')
          .select('id, duration_minutes')
          .in('id', scheduleIds)

        if (!scheduleError && scheduleData) {
          scheduleDurations = scheduleData.reduce((acc: Record<string, number>, schedule: any) => {
            acc[schedule.id] = schedule.duration_minutes
            return acc
          }, {})
        }
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      const formattedSlots = slotsData.map(slot => ({
        id: slot.id,
        expert_id: slot.expert_id,
        slot_date: slot.slot_date,
        start_time: slot.start_time,
        end_time: slot.end_time,
        is_available: slot.is_available,
        duration_minutes: (slot.schedule_id && scheduleDurations[slot.schedule_id]) || 60,
        expert_name: expertProfile?.full_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        expert_avatar: expertProfile?.avatar_url || null
      }))
      
      console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã:', formattedSlots.length)
      console.log('üìÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –≤ —Å–ª–æ—Ç–∞—Ö:', [...new Set(formattedSlots.map(s => s.slot_date))])
      console.log('üî¢ –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã:', formattedSlots.filter(slot => !slot.is_available).length)
      console.log('üìã –î–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã—Ö 5 —Å–ª–æ—Ç–æ–≤:', formattedSlots.slice(0, 5))
      
      setTimeSlots(formattedSlots)
      
    } catch (error: any) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:', error)
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: ' + error.message)
      setTimeSlots([])
    }
  }

  const loadServices = async () => {
    const { data, error } = await supabase
      .from('expert_services')
      .select('*')
      .eq('expert_id', expertId)
      .eq('is_active', true)

    if (error) throw error
    setServices(data || [])
  }

  const loadBookings = async (startDate: string, endDate: string) => {
    const { data, error } = await supabase
      .from('bookings_view')
      .select('*')
      .eq('expert_id', expertId)
      .gte('booking_date', startDate)
      .lte('booking_date', endDate)
      .in('status', ['pending', 'confirmed']) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      .order('booking_date, start_time')

    if (error) throw error
    
    console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', data)
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', data?.length)
    
    setBookings(data || [])
  }

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –Ω–µ–¥–µ–ª—è–º
  const goToPreviousWeek = () => {
    const newDate = new Date(currentDate)
    newDate.setDate(currentDate.getDate() - 7)
    setCurrentDate(newDate)
  }

  const goToNextWeek = () => {
    const newDate = new Date(currentDate)
    newDate.setDate(currentDate.getDate() + 7)
    setCurrentDate(newDate)
  }

  const goToToday = () => {
    setCurrentDate(new Date())
  }

  // –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞
  const handleBookSlot = (slot: TimeSlot) => {
    if (!user) {
      setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
      return
    }

    if (user.id === expertId) {
      setError('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç —É —Å–∞–º–æ–≥–æ —Å–µ–±—è')
      return
    }

    setSelectedSlot(slot)
    setSelectedService('')
    setBookingNotes('')
    setShowBookingModal(true)
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  const createTestBooking = async () => {
    if (!user) {
      setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')
      return
    }

    try {
      setBooking(true)
      setError('')

      // –ù–∞–π–¥–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç
      const availableSlot = timeSlots.find(slot => slot.is_available)
      if (!availableSlot) {
        setError('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
        return
      }

      const bookingData = {
        expert_id: expertId,
        client_id: user.id,
        slot_id: availableSlot.id,
        booking_date: availableSlot.slot_date,
        start_time: availableSlot.start_time,
        end_time: availableSlot.end_time,
        duration_minutes: availableSlot.duration_minutes,
        status: 'confirmed',
        notes: '–¢–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'
      }

      console.log('–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:', bookingData)

      const { error } = await supabase
        .from('bookings')
        .insert([bookingData])

      if (error) throw error

      setMessage('–¢–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!')
      await loadData() // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ' + error.message)
    } finally {
      setBooking(false)
    }
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
  const updateBookingStatus = async (bookingId: string, newStatus: 'confirmed' | 'cancelled') => {
    if (!user) {
      setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞: —ç–∫—Å–ø–µ—Ä—Ç –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å/–æ—Ç–∫–ª–æ–Ω—è—Ç—å, –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–º–µ–Ω—è—Ç—å
    const isExpert = user.id === expertId
    const canManage = isExpert || newStatus === 'cancelled'
    
    if (!canManage) {
      setError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è')
      return
    }

    try {
      setUpdatingBooking(true)
      setError('')

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      let query = supabase
        .from('bookings')
        .update({ 
          status: newStatus,
          updated_at: new Date().toISOString()
        })
        .eq('id', bookingId)

      // –≠–∫—Å–ø–µ—Ä—Ç –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏, –∫–ª–∏–µ–Ω—Ç - —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏–º–∏ –æ—Ç–º–µ–Ω–∞–º–∏
      if (isExpert) {
        query = query.eq('expert_id', expertId)
      } else {
        query = query.eq('client_id', user.id)
      }

      const { error } = await query

      if (error) throw error

      const statusText = newStatus === 'confirmed' ? '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ'
      setMessage(`–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${statusText}`)
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
      await loadData()
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ' + error.message)
    } finally {
      setUpdatingBooking(false)
    }
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const confirmBooking = async () => {
    if (!selectedSlot || !user) return

    try {
      setBooking(true)
      setError('')

      const service = services.find(s => s.id === selectedService)
      
      const bookingData = {
        expert_id: expertId,
        client_id: user.id,
        slot_id: selectedSlot.id,
        service_id: selectedService || null,
        booking_date: selectedSlot.slot_date,
        start_time: selectedSlot.start_time,
        end_time: selectedSlot.end_time,
        duration_minutes: selectedSlot.duration_minutes,
        total_price: service?.price || null,
        currency: service?.currency || 'RUB',
        status: 'pending',
        notes: bookingNotes.trim() || null
      }

      const { error } = await supabase
        .from('bookings')
        .insert([bookingData])

      if (error) throw error

      setMessage('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!')
      setShowBookingModal(false)
      await loadData() // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
    } finally {
      setBooking(false)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
  const getSlotsForDate = (date: Date) => {
    const dateStr = date.toISOString().split('T')[0]
    const slotsForDate = timeSlots.filter(slot => slot.slot_date === dateStr)
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (timeSlots.length > 0) {
      console.log(`üîç getSlotsForDate –¥–ª—è ${dateStr}:`, slotsForDate.length, '–∏–∑', timeSlots.length, '–æ–±—â–∏—Ö')
      if (slotsForDate.length === 0) {
        console.log('üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –≤ —Å–ª–æ—Ç–∞—Ö:', [...new Set(timeSlots.map(s => s.slot_date))])
        console.log('üîç –ü–µ—Ä–≤—ã–µ 3 —Å–ª–æ—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', timeSlots.slice(0, 3).map(s => ({date: s.slot_date, time: s.start_time})))
      }
    }
    
    return slotsForDate
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
  const getBookingsForDate = (date: Date) => {
    const dateStr = date.toISOString().split('T')[0]
    return bookings.filter(booking => booking.booking_date === dateStr)
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatTime = (time: string) => {
    return time.substring(0, 5)
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (date: Date) => {
    const options: Intl.DateTimeFormatOptions = { 
      day: 'numeric', 
      month: 'short' 
    }
    return date.toLocaleDateString('ru-RU', options)
  }

  const getDayName = (date: Date) => {
    const options: Intl.DateTimeFormatOptions = { weekday: 'short' }
    return date.toLocaleDateString('ru-RU', options)
  }

  if (loading) {
    return (
      <div className="flex justify-center items-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  return (
    <div className="bg-white rounded-lg border">
      {/* Header */}
      <div className="p-6 border-b">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Calendar className="h-6 w-6 text-blue-600" />
            <h3 className="text-xl font-semibold">
              {viewMode === 'expert' ? '–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' : '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π'}
            </h3>
          </div>
          
          <div className="flex items-center space-x-2">
            <button
              onClick={goToPreviousWeek}
              className="p-2 hover:bg-gray-100 rounded"
            >
              <ChevronLeft className="h-5 w-5" />
            </button>
            
            <button
              onClick={goToToday}
              className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
            >
              –°–µ–≥–æ–¥–Ω—è
            </button>
            
            <button
              onClick={goToNextWeek}
              className="p-2 hover:bg-gray-100 rounded"
            >
              <ChevronRight className="h-5 w-5" />
            </button>
          </div>
        </div>

        {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
        {error && (
          <div className="mt-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
            {error}
          </div>
        )}

        {message && (
          <div className="mt-4 p-3 bg-green-100 border border-green-400 text-green-700 rounded">
            {message}
          </div>
        )}

        {/* Legend */}
        {viewMode === 'client' && (
          <div className="mt-4 flex flex-wrap items-center gap-4 text-xs">
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 bg-blue-50 border border-blue-200 rounded"></div>
              <span className="text-gray-600">–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 bg-red-50 border border-red-200 rounded"></div>
              <span className="text-gray-600">–£–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ</span>
            </div>
          </div>
        )}

        {/* Debug Panel - –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ */}
        {process.env.NODE_ENV === 'development' && (
          <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded text-sm">
            <div className="font-medium mb-2">üîß –ü–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏</div>
            <div className="space-y-1 text-xs">
              <div>Expert ID: {expertId}</div>
              <div>–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {viewMode}</div>
              <div>–í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: {timeSlots.length}</div>
              <div>–î–æ—Å—Ç—É–ø–Ω—ã—Ö: {timeSlots.filter(s => s.is_available).length}</div>
              <div>–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {timeSlots.filter(s => !s.is_available).length}</div>
              <div>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {bookings.length}</div>
              <div>–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {weekDates[0].toISOString().split('T')[0]} - {weekDates[6].toISOString().split('T')[0]}</div>
              {timeSlots.length > 0 && (
                <div>–î–∞—Ç—ã —Å–ª–æ—Ç–æ–≤: {[...new Set(timeSlots.map(s => s.slot_date))].sort().join(', ')}</div>
              )}
            </div>
            <div className="flex space-x-2 mt-2">
              <button
                onClick={createTestBooking}
                className="px-3 py-1 bg-yellow-600 text-white rounded text-xs hover:bg-yellow-700"
              >
                –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
              </button>
              <button
                onClick={() => {
                  console.log('üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•')
                  console.log('–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', { expertId, currentDate: currentDate.toISOString() })
                  console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ timeSlots:', timeSlots.length)
                  loadData()
                }}
                className="px-3 py-1 bg-blue-600 text-white rounded text-xs hover:bg-blue-700"
              >
                –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
              </button>
              <button
                onClick={async () => {
                  console.log('üöÄ –ü–†–Ø–ú–û–ô –¢–ï–°–¢ loadTimeSlots')
                  const startDate = weekDates[0].toISOString().split('T')[0]
                  const endDate = weekDates[6].toISOString().split('T')[0]
                  console.log('–¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', { expertId, startDate, endDate })
                  
                  try {
                    const { data, error } = await supabase
                      .from('time_slots')
                      .select('*')
                      .eq('expert_id', expertId)
                      .gte('slot_date', startDate)
                      .lte('slot_date', endDate)
                    
                    console.log('üîç –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', { error, count: data?.length, data: data?.slice(0, 3) })
                  } catch (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∞:', err)
                  }
                }}
                className="px-3 py-1 bg-purple-600 text-white rounded text-xs hover:bg-purple-700"
              >
                –¢–µ—Å—Ç –ë–î
              </button>
              <button
                onClick={() => {
                  console.log('=== –û–¢–õ–ê–î–ö–ê –†–ï–ù–î–ï–†–ê ===')
                  console.log('timeSlots state:', timeSlots)
                  console.log('weekDates:', weekDates.map(d => d.toISOString().split('T')[0]))
                  weekDates.forEach(date => {
                    const dateStr = date.toISOString().split('T')[0]
                    const slots = getSlotsForDate(date)
                    console.log(`–°–ª–æ—Ç—ã –¥–ª—è ${dateStr}:`, slots)
                  })
                  console.log('=== –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò ===')
                }}
                className="px-3 py-1 bg-red-600 text-white rounded text-xs hover:bg-red-700"
              >
                –û—Ç–ª–∞–¥–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∞
              </button>
            </div>
          </div>
        )}
      </div>

      {/* Calendar Grid */}
      <div className="p-6">
        <div className="grid grid-cols-7 gap-4">
          {/* Day Headers */}
          {weekDates.map((date, index) => (
            <div key={index} className="text-center">
              <div className="font-medium text-gray-700">{getDayName(date)}</div>
              <div className={`text-sm ${
                date.toDateString() === new Date().toDateString() 
                  ? 'text-blue-600 font-semibold' 
                  : 'text-gray-500'
              }`}>
                {formatDate(date)}
              </div>
            </div>
          ))}

          {/* Time Slots */}
          {weekDates.map((date, dayIndex) => {
            const dateStr = date.toISOString().split('T')[0]
            const daySlots = getSlotsForDate(date)
            console.log(`üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ ${dayIndex} (${dateStr}): ${daySlots.length} —Å–ª–æ—Ç–æ–≤, —Ä–µ–∂–∏–º: ${viewMode}`)
            
            return (
            <div key={dayIndex} className="space-y-2">
              {viewMode === 'expert' ? (
                // –†–µ–∂–∏–º —ç–∫—Å–ø–µ—Ä—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï —Å–ª–æ—Ç—ã (–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ)
                (() => {
                  const slotsForThisDate = getSlotsForDate(date)
                  const bookingsForThisDate = getBookingsForDate(date)
                  
                  if (slotsForThisDate.length > 0) {
                    return slotsForThisDate.map(slot => {
                      const booking = bookingsForThisDate.find(b => 
                        b.start_time === slot.start_time && b.end_time === slot.end_time
                      )
                      
                      if (booking) {
                        // –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ—Ç
                        return (
                          <div
                            key={slot.id}
                            className={`p-2 rounded text-xs border ${
                              booking.status === 'confirmed' 
                                ? 'bg-green-100 border-green-300 text-green-800'
                                : booking.status === 'pending'
                                ? 'bg-yellow-100 border-yellow-300 text-yellow-800'
                                : 'bg-gray-100 border-gray-300 text-gray-600'
                            }`}
                          >
                            <div className="font-medium">
                              {formatTime(booking.start_time)} - {formatTime(booking.end_time)}
                            </div>
                            <div className="text-xs opacity-75 mb-1">
                              {booking.client_name}
                            </div>
                            {booking.service_name && (
                              <div className="text-xs opacity-75 mb-2">
                                {booking.service_name}
                              </div>
                            )}
                            <div className="text-xs font-medium mb-1">
                              {booking.status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' 
                               : booking.status === 'confirmed' ? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'
                               : '–û—Ç–º–µ–Ω–µ–Ω–æ'}
                            </div>
                            
                            {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è pending –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π */}
                            {booking.status === 'pending' && user?.id === expertId && (
                              <div className="flex space-x-1 mt-1">
                                <button
                                  onClick={() => updateBookingStatus(booking.id, 'confirmed')}
                                  disabled={updatingBooking}
                                  className="px-2 py-1 bg-green-600 text-white rounded text-xs hover:bg-green-700 disabled:opacity-50 flex-1"
                                >
                                  ‚úì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                                </button>
                                <button
                                  onClick={() => updateBookingStatus(booking.id, 'cancelled')}
                                  disabled={updatingBooking}
                                  className="px-2 py-1 bg-red-600 text-white rounded text-xs hover:bg-red-700 disabled:opacity-50 flex-1"
                                >
                                  ‚úó –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                                </button>
                              </div>
                            )}
                          </div>
                        )
                      } else {
                        // –°–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
                        return (
                          <div
                            key={slot.id}
                            className="p-2 rounded text-xs border bg-blue-50 border-blue-200 text-blue-800"
                          >
                            <div className="font-medium">
                              {formatTime(slot.start_time)} - {formatTime(slot.end_time)}
                            </div>
                            <div className="text-xs opacity-75">
                              –°–≤–æ–±–æ–¥–Ω–æ
                            </div>
                          </div>
                        )
                      }
                    })
                  } else {
                    return (
                      <div className="text-xs text-gray-400 text-center py-4">
                        –ù–µ—Ç —Å–ª–æ—Ç–æ–≤
                      </div>
                    )
                  }
                })()
              ) : (
                // –†–µ–∂–∏–º –∫–ª–∏–µ–Ω—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã (–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
                (() => {
                  const slotsForThisDate = getSlotsForDate(date)
                  console.log(`üîç –†–µ–Ω–¥–µ—Ä –¥–ª—è ${date.toISOString().split('T')[0]}: –Ω–∞–π–¥–µ–Ω–æ ${slotsForThisDate.length} —Å–ª–æ—Ç–æ–≤`)
                  return slotsForThisDate.length > 0
                })() ? (
                  getSlotsForDate(date).map(slot => {
                    const booking = getBookingsForDate(date).find(b => 
                      b.start_time === slot.start_time && b.end_time === slot.end_time
                    )
                    
                    console.log(`–°–ª–æ—Ç ${slot.start_time}-${slot.end_time}: –¥–æ—Å—Ç—É–ø–µ–Ω=${slot.is_available}, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ=`, booking)
                    
                    if (slot.is_available) {
                      // –î–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç
                      return (
                        <button
                          key={slot.id}
                          onClick={() => handleBookSlot(slot)}
                          className="w-full p-2 text-xs bg-blue-50 border border-blue-200 text-blue-800 rounded hover:bg-blue-100 transition-colors"
                        >
                          <div className="font-medium">
                            {formatTime(slot.start_time)} - {formatTime(slot.end_time)}
                          </div>
                          <div className="text-xs opacity-75">
                            {slot.duration_minutes} –º–∏–Ω
                          </div>
                        </button>
                      )
                      } else {
                        // –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ—Ç
                        return (
                          <div
                            key={slot.id}
                            className="w-full p-2 text-xs bg-red-50 border border-red-200 text-red-800 rounded opacity-75"
                          >
                            <div className="font-medium">
                              {formatTime(slot.start_time)} - {formatTime(slot.end_time)}
                            </div>
                            <div className="text-xs opacity-75 mb-1">
                              –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ
                            </div>
                            {booking && booking.client_name && (
                              <div className="text-xs opacity-75 mb-1">
                                {booking.client_name}
                              </div>
                            )}
                            {booking && (
                              <div className="text-xs font-medium mb-1">
                                {booking.status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' 
                                 : booking.status === 'confirmed' ? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'
                                 : '–û—Ç–º–µ–Ω–µ–Ω–æ'}
                              </div>
                            )}
                            
                            {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ */}
                            {booking && booking.status === 'pending' && user?.id === booking.client_id && (
                              <button
                                onClick={() => updateBookingStatus(booking.id, 'cancelled')}
                                disabled={updatingBooking}
                                className="w-full px-2 py-1 bg-red-600 text-white rounded text-xs hover:bg-red-700 disabled:opacity-50 mt-1"
                              >
                                –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                              </button>
                            )}
                          </div>
                        )
                      }
                  })
                ) : (
                  <div className="text-xs text-gray-400 text-center py-4">
                    –ù–µ—Ç —Å–ª–æ—Ç–æ–≤
                  </div>
                )
              )}
            </div>
            )
          })}
        </div>
      </div>

      {/* Booking Modal */}
      {showBookingModal && selectedSlot && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50">
          <div className="flex items-center justify-center min-h-screen px-4 py-20">
          <div className="bg-white rounded-lg w-full max-w-md">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold">–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è</h3>
                <button
                  onClick={() => setShowBookingModal(false)}
                  className="p-1 hover:bg-gray-100 rounded"
                >
                  <X className="h-5 w-5" />
                </button>
              </div>

              <div className="space-y-4">
                <div>
                  <div className="text-sm text-gray-600">–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</div>
                  <div className="font-medium">
                    {new Date(selectedSlot.slot_date).toLocaleDateString('ru-RU', {
                      weekday: 'long',
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </div>
                  <div className="text-blue-600">
                    {formatTime(selectedSlot.start_time)} - {formatTime(selectedSlot.end_time)}
                  </div>
                </div>

                <div>
                  <div className="text-sm text-gray-600">–≠–∫—Å–ø–µ—Ä—Ç</div>
                  <div className="font-medium">{selectedSlot.expert_name}</div>
                </div>

                {services.length > 0 && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É
                    </label>
                    <select
                      value={selectedService}
                      onChange={(e) => setSelectedService(e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="">–ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —É—Å–ª—É–≥–µ</option>
                      {services.map(service => (
                        <option key={service.id} value={service.id}>
                          {service.service_name} - {service.price}‚ÇΩ
                        </option>
                      ))}
                    </select>
                  </div>
                )}

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                  </label>
                  <textarea
                    value={bookingNotes}
                    onChange={(e) => setBookingNotes(e.target.value)}
                    placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–Ω—è—Ç–∏–∏"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    rows={3}
                  />
                </div>

                <div className="flex space-x-3 pt-4">
                  <button
                    onClick={() => setShowBookingModal(false)}
                    className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50"
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  <button
                    onClick={confirmBooking}
                    disabled={booking}
                    className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {booking ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2 inline-block"></div>
                        –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...
                      </>
                    ) : (
                      '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å'
                    )}
                  </button>
                </div>
              </div>
            </div>
          </div>
          </div>
        </div>
      )}
    </div>
  )
}
